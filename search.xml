<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[判断fastq文件质量编码格式及Phred64转Phred33方法]]></title>
      <url>%2F2017%2F04%2F25%2Ffastq-phred-trans%2F</url>
      <content type="text"><![CDATA[前几天有朋友从网上下载了一批fastq文件，为Phred64格式，分析之前没发现，比对的时候BWA报错了。很多人可能没有接触过老Illumina数据，不知道怎么判断编码格式，也不知道怎么转为Phred33格式，所以简单说明一下怎么判断fastq文件的质量编码方式以及怎么将Phred64编码格式转为Phred33编码格式。 Phred64/33质量编码格式区别fastq文件中，碱基质量是用ASCII字符表示。Phred64编码格式，碱基质量值为字符的十进制ASCII码减去64。同理，Phred33编码格式，碱基质量值为字符的十进制ASCII码减去33。一般碱基的质量值范围为[0, 41]，X ten之后，质量值只有(2,7,11,22,27,32,37,42)几个梯度。因此，GATK的BQSR过程对于X ten的数据可能更加重要。Phred质量值Q和出错的概率P的关系为Q = -10*lg(P)，如碱基质量值为30，表示出错的概率为0.001，碱基质量值为20，表示出错的概率为0.01。目前主流软件如BWA, GATK等都识别的是Phred33质量编码格式，如果为Phred64格式，则可能会报错，即使不报错，后续的分析也会有问题。因此，下载的数据如果不清楚编码格式，需要先判断，如果为Phred64，则需要转为Phred33格式。 判断fastq文件质量值编码格式格式判断既可以通过肉眼快速判断，也可以使用下面的脚本进行判断。如果文件少，没有编程基础，可以用快速判断的方法。利用程序判断更加准确、快速、可批量处理，因此有编程基础的人，应该尽量使用程序判断。 肉眼快速判断：质量字符有数字[0~9]的为Phred33，有小写字母[a~z]的为Phred64。通过程序：基本思路为将一定数量的reads质量值字符转为ASCII码，然后判断质量值的范围。脚本的使用方法如下，第一个参数为fastq文件，自动判断是否为压缩文件，第二个参数为用于判断的reads数，默认为1000。 1perl CheckFqQualityCode.pl prefix.fq[.gz] [1000] Phred64格式转Phred33格式Phred64格式转Phred33格式的原理很简单，只需在原有ASCII码的基础上减去64再加上33既可。大家可以自己写，也可以使用lh写的seqtk工具，使用命令：1seqtk seq -VQ64 prefix.phred64.fq.gz | gzip &gt; prefix.phred33.fq.gz]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[GWAS如何确定候选区间和causal gene]]></title>
      <url>%2F2017%2F04%2F09%2FGWAS%E5%A6%82%E4%BD%95%E7%A1%AE%E5%AE%9A%E5%80%99%E9%80%89%E5%8C%BA%E9%97%B4%E5%92%8Ccausal-gene%2F</url>
      <content type="text"><![CDATA[随着高通量测序成本的急剧下降，越来越多的GWAS研究通过全基因组重测序获得标记。全基因组重测序的高密度标记，使得通过GWAS研究快速找到causal gene甚至causal mutation成为可能。但是通过GWAS得到一个信号后，怎么确定与这个信号关联的基因呢？ 基本的思路就是找与这个信号强连锁的区域，一般来说r2大于0.6的区域视为强连锁的区域。简单粗糙的做法：我们可以通过群体的全基因组LD-decay分析，找到LD decay到r2等于0.6时所对应的距离，将GWAS超过阈值的信号前后各延伸这个距离作为候选区间。但是基因组不同区域的连锁程度差异很大，上面一刀切的做法可能使我们漏掉一些基因，或者多调查许多关联性并不强的基因。而且很多作物的连锁性很强，导致候选基因很多，这样就大大增加了工作难度。下面介绍一个非常简单高效的方法（参考文献）。 找到信号后，向前后延伸一段距离（可以根据全基因组的LD-decay水平大概估计），计算这段区域内所有标记pairwise r2，将r2大于0.6的block作为候选区间。pairwise r2可以用PLINK计算： 123plink --noweb --bfile &lt;bfile_prefix&gt; \ --chr 5 --from-bp 13641890 --to-bp 17641890 \ --matrix --r2 --out &lt;out_prefix&gt; 画图用R,输入文件为plink计算的到的r2矩阵，以及标记的位置: 123456789#!/usr/bin/env Rscriptlibrary(LDheatmap)argv &lt;- commandArgs(TRUE)ldmatrix &lt;- as.matrix(read.table(argv[1],sep=' '))pos &lt;- as.numeric(unlist(read.table(argv[2], head=FALSE)))pdf(argv[3])rgb.palette &lt;- colorRampPalette(rev(c("yellow", "orange", "red")), space = "rgb")LDheatmap(ldmatrix, genetic.distances=pos, color=rgb.palette(100), flip=TRUE)dev.off() 将这个区域内的标记按照其对基因功能的影响程度分为5类： 1） 标记与性状显著关联（-log10P大于阈值），且该标记影响氨基酸编码，或者位于剪接位点；2） 标记与性状显著关联，且位于基因起始密码子上游2 kb内；3） 标记与性状显著关联，且位于基因内，除开1）和2）之外的标记4） 标记与性状显著关联，位于基因间区5） 标记与性状不显著关联 然后，按照这5类的顺序，依次调查，一般来说，属于1）类的可能性很大，而且基因一般就几个，这样就大大减少了工作难度。]]></content>
    </entry>

    
  
  
</search>
